/*
----------------------------React.cloneElement(HOC).txt----------------------------------------
*/

//В этой части мы поговорим о методе копирования элементов, который нам предоставляет React. Зачем это нужно и как это применяется, мы разберём больше в части про React.Children. Вместе они больше всего дают профит.

//React.cloneElement() клонирует и возвращает новый React-элемент. Первым параметром он принимает элемент, вторым config и третьим потомков (опционально):

//React.cloneElement(element, config, ...children);
//config может содержать все новые пропсы, key и ref. Полученный таким способом элемент будет иметь пропсы исходного элемента (element) и также новые пропсы из config. Если в config совпадет название пропса, который уже есть у element, то применится проп из config. key и ref из исходного элемента (element) будут сохранены, если в config они не были переданы. Новые дочерние элементы (children) заменят существующие (у element).

//Давай немного попрактикуемся с React.cloneElement(). Допустим, мы делаем сайт для журнала по подписке. У нас есть компонент, который просто выводит тест статьи на странице (ссылка на готовый пример):

const Text = ({ text }) => {
  return <p>{text}</p>
}
//Мы хотим сделать так, чтобы была проверка: если у пользователя нет подписки, то вернуть ему только первые 2 параграфа и текст о том, что нужно оплатить подписку для дальнейшего чтения.

//Утилита получения 2-х параграфов и сообщения вот такая:

const getTwoParagraph = (text) => {
  const arrParagraph = text.split(/n/)
  return arrParagraph.length > 2
    ? [...arrParagraph.slice(0, 2), 'Для продолжения оформите подписку'].join(
        'n'
      )
    : text
}

//Мы плавно подошли к использованию React.cloneElement():

const CheckSubscrube = () => {
  const [isSubscribe, setIsSubscribe] = useState(false)

  // Получаем элемент
  const myText = <Text text={someText} />

  // Клонируем его
  const nextText = React.cloneElement(myText, {
    // Меняем пропс text
    text: isSubscribe // если подписан
      ? myText.props.text // вернуть просто текст
      : getTwoParagraph(myText.props.text) // иначе обрезать
  })

  return (
    <>
      <div>
        <button
          className='btn btn-primary mb-2'
          onClick={() => setIsSubscribe((s) => !s)}
        >
          Подписаться{' '}
        </button>
      </div>
      {nextText}
    </>
  )
}

//Получиться вот такой компонент:  смотреть Screenshot_1.png

//При нажатии на кнопку можно увидеть весь текст.

//React.cloneElement() нужно использовать в тех случаях, когда невозможно изменить props с помощью HOC, что часто происходит при написании переиспользуемых компонентов. Один из таких примером мы рассмотрим в следующей части.
